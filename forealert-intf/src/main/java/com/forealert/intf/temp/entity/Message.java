package com.forealert.intf.temp.entity;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
import com.forealert.intf.Constant;

import javax.xml.bind.annotation.XmlRootElement;
import java.util.Date;
import java.util.Set;
import java.util.TimeZone;

@JsonSerialize(include = Inclusion.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@XmlRootElement(name = "Message")
@DynamoDBTable(tableName="Message")
public class Message {

	private String messageId;
	private InfoExchangeAppEnum appId;
	private String title;
	private String senderUuid;
	private String currentStatus;
	private String lastModifiedDate;
	private String createdDate;
	
	private Double targetRadius;
	private String targetAddress;
	private String targetCity;
	private String targetZip;
	private String targetState;
	private String targetCountry;
	private Double targetLatitude;
	private Double targetLongitude;
	
	private int expiryTimeInMinutes = Constant.DEFAULT_MESSAGE_EXPIRY_TIME_IN_MINUTES;
	private boolean isMessageRepliesBlocked;
	private Double warningRadius;
	private Set<String> groupIds;
	private String messageType;
	private boolean isUserGEOMessage;
	private boolean isGroupGEOMessage;
	private boolean isAnonymousMessage; 
	private Double senderLatitude;
	private Double senderLongitude;
	private Double senderAltitude;
	private String fileType;
	private String fileDescription;
	private String fileLocationUrl;
	private String fileIconUrl;
	private String fileTitle;

	
	public Message(){}
	
	public Message(String messageId, String appId) {
		this.messageId = messageId;
		this.appId = InfoExchangeAppEnum.valueOf(appId);
	}

	@DynamoDBHashKey(attributeName="MsgId")
	@DynamoDBAutoGeneratedKey

	public String getMessageId() {
		return messageId;
	}
	public void setMessageId(String messageId) {
		this.messageId = messageId;
	}
	
	//@DynamoDBIndexHashKey(globalSecondaryIndexName = "appId-targetLatitude-index", attributeName = "appId")
	@DynamoDBRangeKey(attributeName="ApId")
	public String getAppId() {
		if(appId == null) return InfoExchangeAppEnum.UN.name();
		
		return appId.name();
	}
	public void setAppId( String appId) {
		this.appId =  (appId == null ? InfoExchangeAppEnum.UN : InfoExchangeAppEnum.valueOf(appId));;
	}
	
	
	@DynamoDBAttribute(attributeName="TTL")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@DynamoDBAttribute(attributeName="SUuid")
	public String getSenderUuid() {
		return senderUuid;
	}
	public void setSenderUuid(String senderUuid) {
		this.senderUuid = senderUuid;
	}
	
	@DynamoDBAttribute(attributeName="CStS")
	public String getCurrentStatus() {
		return currentStatus;
	}

	public void setCurrentStatus(String currentStatus) {
		this.currentStatus = currentStatus;
	}

	@DynamoDBAttribute(attributeName="LMD")
	public String getLastModifiedDate() {
		return lastModifiedDate;
	}
	
	public void setLastModifiedDate(Date lastModifiedDate) {
		if(lastModifiedDate == null) lastModifiedDate = new Date();
		
		Constant.dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
		this.lastModifiedDate = Constant.dateFormatter.format(lastModifiedDate);
	}
	
	@DynamoDBAttribute(attributeName="CRD") 
	public String getCreatedDate() {
		return createdDate;
	}
	public void setCreatedDate(Date createdDate) {
		if(createdDate == null) createdDate = new Date();
		Constant.dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
		this.createdDate = Constant.dateFormatter.format(createdDate);
	}
	
	public void setCreatedDate(String createdDate) {
		this.createdDate = createdDate;
	}

	public void setLastModifiedDate(String lastModifiedDate) {
		this.lastModifiedDate = lastModifiedDate;
	}

	@DynamoDBAttribute(attributeName="TRdS")
	public Double getTargetRadius() {
		return targetRadius;
	}
	public void setTargetRadius(Double targetRadius) {
		this.targetRadius = targetRadius;
	}
	
	@DynamoDBAttribute(attributeName="TAds")
	public String getTargetAddress() {
		return targetAddress;
	}
	public void setTargetAddress(String targetAddress) {
		this.targetAddress = targetAddress;
	}
	
	@DynamoDBAttribute(attributeName="TCty")
	public String getTargetCity() {
		return targetCity;
	}
	public void setTargetCity(String targetCity) {
		this.targetCity = targetCity;
	}
	
	@DynamoDBAttribute(attributeName="TZip")
	public String getTargetZip() {
		return targetZip;
	}
	public void setTargetZip(String targetZip) {
		this.targetZip = targetZip;
	}
	
	@DynamoDBAttribute(attributeName="TSts")
	public String getTargetState() {
		return targetState;
	}
	public void setTargetState(String targetState) {
		this.targetState = targetState;
	}
	
	@DynamoDBAttribute(attributeName="TCnt")
	public String getTargetCountry() {
		return targetCountry;
	}
	public void setTargetCountry(String targetCountry) {
		this.targetCountry = targetCountry;
	}
	
	//@DynamoDBIndexRangeKey(globalSecondaryIndexName = "appId-targetLatitude-index", attributeName = "targetLatitude")
	@DynamoDBAttribute(attributeName="TLAT")
	public Double getTargetLatitude() {
		return targetLatitude;
	}
	public void setTargetLatitude(Double targetLatitude) {
		this.targetLatitude = targetLatitude;
	}
	
	@DynamoDBAttribute(attributeName="TLONGT")
	public Double getTargetLongitude() {
		return targetLongitude;
	}
	public void setTargetLongitude(Double targetLongitude) {
		this.targetLongitude = targetLongitude;
	}

	
	@DynamoDBAttribute(attributeName="SLAT")
	public Double getSenderLatitude() {
		return senderLatitude;
	}

	public void setSenderLatitude(Double senderLatitude) {
		this.senderLatitude = senderLatitude;
	}

	@DynamoDBAttribute(attributeName="SLONGT")
	public Double getSenderLongitude() {
		return senderLongitude;
	}

	public void setSenderLongitude(Double senderLongitude) {
		this.senderLongitude = senderLongitude;
	}
	
	@DynamoDBAttribute(attributeName="SALT")
	public Double getSenderAltitude() {
		return senderAltitude;
	}

	public void setSenderAltitude(Double senderLongitude) {
		this.senderAltitude = senderLongitude;
	}

	@DynamoDBAttribute(attributeName="ETMint")
	public int getExpiryTimeInMinutes() {
		return expiryTimeInMinutes;
	}

	public void setExpiryTimeInMinutes(int expiryTimeInMinutes) {
		this.expiryTimeInMinutes = expiryTimeInMinutes;
	}

	@DynamoDBAttribute(attributeName="isMRBlock")
	public boolean isMessageRepliesBlocked() {
		return isMessageRepliesBlocked;
	}

	public void setMessageRepliesBlocked(boolean isMessageRepliesBlocked) {
		this.isMessageRepliesBlocked = isMessageRepliesBlocked;
	}

	@DynamoDBAttribute(attributeName="WRdS")
	public Double getWarningRadius() {
		return warningRadius;
	}

	public void setWarningRadius(Double warningRadius) {
		this.warningRadius = warningRadius;
	}

	@DynamoDBAttribute(attributeName="GId")
	public Set<String> getGroupIds() {
		return groupIds;
	}

	public void setGroupIds(Set<String> groupIds) {
		this.groupIds = groupIds;
	}

	@DynamoDBAttribute(attributeName="MTY")
	public String getMessageType() {
		return messageType;
	}

	public void setMessageType(String messageType) {
		this.messageType = messageType;
	}

	@DynamoDBAttribute(attributeName="isUGEOMsg")
	public boolean isUserGEOMessage() {
		return isUserGEOMessage;
	}

	public void setUserGEOMessage(boolean isUserGEOMessage) {
		this.isUserGEOMessage = isUserGEOMessage;
	}

	@DynamoDBAttribute(attributeName="isGGEOMsg")
	public boolean isGroupGEOMessage() {
		return isGroupGEOMessage;
	}

	public void setGroupGEOMessage(boolean isGroupGEOMessage) {
		this.isGroupGEOMessage = isGroupGEOMessage;
	}

	@DynamoDBAttribute(attributeName="isAnoyMsg")
	public boolean isAnonymousMessage() {
		return isAnonymousMessage;
	}

	public void setAnonymousMessage(boolean isAnonymousMessage) {
		this.isAnonymousMessage = isAnonymousMessage;
	}

	@DynamoDBAttribute(attributeName="FTy")
	public String getFileType() {
		return fileType;
	}

	public void setFileType(String fileType) {
		this.fileType = fileType;
	}

	@DynamoDBAttribute(attributeName="FDsc")
	public String getFileDescription() {
		return fileDescription;
	}

	public void setFileDescription(String fileDescription) {
		this.fileDescription = fileDescription;
	}

	@DynamoDBAttribute(attributeName="FLUrl")
	public String getFileLocationUrl() {
		return fileLocationUrl;
	}

	public void setFileLocationUrl(String fileLocationUrl) {
		this.fileLocationUrl = fileLocationUrl;
	}

	@DynamoDBAttribute(attributeName="FIU")
	public String getFileIconUrl() {
		return fileIconUrl;
	}

	public void setFileIconUrl(String fileIconUrl) {
		this.fileIconUrl = fileIconUrl;
	}

	@DynamoDBAttribute(attributeName="FTTL")
	public String getFileTitle() {
		return fileTitle;
	}

	public void setFileTitle(String fileTitle) {
		this.fileTitle = fileTitle;
	}

	@Override
	public String toString() {
		return "Message [messageId=" + messageId + ", appId=" + appId + ", title=" + title + ", senderUuid="
				+ senderUuid + ", currentStatus=" + currentStatus + ", lastModifiedDate=" + lastModifiedDate
				+ ", createdDate=" + createdDate + ", targetRadius=" + targetRadius + ", targetAddress=" + targetAddress
				+ ", targetCity=" + targetCity + ", targetZip=" + targetZip + ", targetState=" + targetState
				+ ", targetCountry=" + targetCountry + ", targetLatitude=" + targetLatitude + ", targetLongitude="
				+ targetLongitude + ", expiryTimeInMinutes=" + expiryTimeInMinutes + ", isMessageRepliesBlocked="
				+ isMessageRepliesBlocked + ", warningRadius=" + warningRadius + ", groupIds=" + groupIds
				+ ", messageType=" + messageType + ", isUserGEOMessage=" + isUserGEOMessage + ", isGroupGEOMessage="
				+ isGroupGEOMessage + ", isAnonymousMessage=" + isAnonymousMessage + ", senderLatitude="
				+ senderLatitude + ", senderLongitude=" + senderLongitude + ", senderAltitude=" + senderAltitude
				+ ", fileType=" + fileType + ", fileDescription=" + fileDescription + ", fileLocationUrl="
				+ fileLocationUrl + ", fileIconUrl=" + fileIconUrl + ", fileTitle=" + fileTitle + "]";
	}
	
}
