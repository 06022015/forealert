package com.forealert.intf.temp.entity;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
import com.forealert.intf.Constant;

import javax.xml.bind.annotation.XmlRootElement;
import java.util.*;

@JsonSerialize(include = Inclusion.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@XmlRootElement(name = "Community_Groups")
@DynamoDBTable(tableName="Community_Groups")
public class CommunityGroup {

	private String groupId;
	private String groupName;
	private Double latitude;
	private Double longitude;
	private Double radius;
	private String createdDate;
	private String lastModifiedDate;
	private boolean byPassFPValidation;
	private Set<Emoji> emojis;

	@DynamoDBHashKey(attributeName="GId")
	@DynamoDBAutoGeneratedKey
	public String getGroupId() {
		return groupId;
	}
	public void setGroupId(String groupId) {
		this.groupId = groupId;
	}

	@DynamoDBRangeKey(attributeName="GNm")
	public String getGroupName() {
		return groupName;
	}
	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

	@DynamoDBAttribute(attributeName="RdS")
	public Double getRadius() {
		return radius;
	}
	public void setRadius(Double radius) {
		this.radius = radius;
	}
	@DynamoDBAttribute(attributeName="BPFP")
	public boolean isByPassFPValidation() {
		return byPassFPValidation;
	}
	public void setByPassFPValidation(boolean byPassFPValidation) {
		this.byPassFPValidation = byPassFPValidation;
	}

	@DynamoDBAttribute(attributeName="LAT")
	public Double getLatitude() {
		return latitude;
	}

	public void setLatitude(Double latitude) {
		this.latitude = latitude;
	}

	@DynamoDBAttribute(attributeName="LONGT")
	public Double getLongitude() {
		return longitude;
	}
	public void setLongitude(Double longitude) {
		this.longitude = longitude;
	}

	@DynamoDBAttribute(attributeName="EJs")
	@DynamoDBMarshalling (marshallerClass = EmojiMarshaller.class)
	public Set<Emoji> getEmojis() {
		return emojis;
	}
	public void setEmojis(Set<Emoji> emojis) {
		this.emojis = emojis;
	}
	@DynamoDBAttribute(attributeName="CRD")
	public String getCreatedDate() {
		return createdDate;
	}
	public void setCreatedDate(Date createdDate) {
		if(createdDate == null) createdDate = new Date();
		Constant.dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
		this.createdDate = Constant.dateFormatter.format(createdDate);

	}

	@DynamoDBAttribute(attributeName="LMD")
	public String getLastModifiedDate() {
		return lastModifiedDate;
	}
	public void setLastModifiedDate(Date lastModifiedDate) {
		if(lastModifiedDate == null) lastModifiedDate = new Date();

        Constant.dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
		this.lastModifiedDate = Constant.dateFormatter.format(lastModifiedDate);

	}
	public void setCreatedDate(String createdDate) {
		this.createdDate = createdDate;
	}
	public void setLastModifiedDate(String lastModifiedDate) {
		this.lastModifiedDate = lastModifiedDate;
	}
	@Override
	public String toString() {
		return "CommunityGroups [groupId=" + groupId + ", groupName="
				+ groupName + ", latitude=" + latitude + ", longitude="
				+ longitude + ", radius=" + radius + ", createdDate="
				+ createdDate + ", lastModifiedDate=" + lastModifiedDate + "]";
	}

	public static void main(String args[]) {
		String groupId = "055ee8f0-98ac-4291-9cbd-e36cc0";
		CommunityGroup group = null;//InfoExchangeDBClient.findCommunityGroupByGroupId(groupId);
		if(group == null) {
			group  = new CommunityGroup();
			group.setCreatedDate(new Date());
			group.setGroupName("HOSUR1");
			group.setLatitude(37.45645);
			group.setLongitude(-122.4566);
			group.setRadius(40.0);
			group.setByPassFPValidation(true);
		}


		Emoji e1 = new Emoji();
		e1.setEmojiId(UUID.randomUUID().toString());
		e1.setTitle("Fire");
		e1.setMessage("To report smoke in your area. Please contact local police too");
		e1.setIconUrl("https://s3-us-west-1.amazonaws.com/forealert-bucket/emojis/gasmask.png");

		Emoji e2 = new Emoji();
		e2.setEmojiId(UUID.randomUUID().toString());
		e2.setTitle("Loud noise");
		e2.setMessage("To report EMERGENCY  in your area. Please contact local police too");
		e2.setIconUrl("https://s3-us-west-1.amazonaws.com/forealert-bucket/emojis/medical_emergency.png");

		Set<Emoji> emojis = group.getEmojis();
		if(emojis == null) emojis = new HashSet<Emoji>();
		emojis.add(e1);
		emojis.add(e2);
		group.setEmojis(emojis);

		group.setLastModifiedDate(new Date());
		//InfoExchangeDBClient.save(group);
	}

}
